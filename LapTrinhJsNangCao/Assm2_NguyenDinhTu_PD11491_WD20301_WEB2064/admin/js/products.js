//truy c·∫≠p db.json
const API_PRODUCTS = "http://localhost:4000/products";
const API_CATEGORIES = "http://localhost:4000/categories";
const API_VARIANTS = "http://localhost:4000/product_variants";

//truy c·∫≠p ƒë·∫øn id ch·ªçn danh m·ª•c v√† danh s√°ch s·∫£n ph·∫©m
const categorySelect = document.getElementById("product-category");
const productList = document.getElementById("product-list");
const form = document.getElementById("product-form");

//h√†m l·∫•y danh s√°ch danh m·ª•c ƒë·ªÉ ch·ªçn
async function loadCategories(){
    const res = await fetch(`${API_CATEGORIES}`);
    const data = await res.json();

    categorySelect.innerHTML = data.map(c => `<option value="${c.id}">${c.name}</option>`).join("");
}

//h√†m hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
async function loadProducts() {
    //x√©t ƒëƒÉng nh·∫≠p
    const userData = JSON.parse(localStorage.getItem("admin"));

    if (!userData || userData.role !== "admin") {
        alert("‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!");
        window.location.href = "login.html";
    }

    //l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m trong db.json
    const res = await fetch(API_PRODUCTS);
    const data = await res.json();
    productList.innerHTML = data.map(p => `
        <tr>
            <td>${p.id}</td>
            <td><img src="../images/${p.image}" width="60"></td>
            <td>${p.name}</td>
            <td>${p.cate_id}</td>
            <td>${p.price.toLocaleString()}ƒë</td>
            <td>${p.detail}</td>
            <td>
                <button class="btn btn-edit" onclick="editProduct('${p.id}')">S·ª≠a</button>
                <button class="btn btn-delete" onclick="deleteProduct('${p.id}')">X√≥a</button>
                <button class="action-btn variant" onclick="openVariantPage('${p.id}')">Bi·∫øn th·ªÉ</button>
            </td>
        </tr>
    `).join("");
}

//h√†m th√™m s·∫£n ph·∫©m
async function addProduct(formData) {
    const imageFile = formData.get("image");
    let imageName = "default.jpg"; // fallback

    if (imageFile && imageFile.name) {
        imageName = imageFile.name;
    }

    const newProduct = {
        name: formData.get("name"),
        cate_id: formData.get("cate_id"),
        price: Number(formData.get("price")),
        detail: formData.get("detail"),
        image: imageName,
    };

    const res = await fetch(API_PRODUCTS, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newProduct),
    });

    alert("‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
}

//h√†m s·ª≠a s·∫£n ph·∫©m
async function editProduct(id){
    const res = await fetch(`${API_PRODUCTS}/${id}`);
    const product = await res.json();

    //ƒë∆∞a d·ªØ li·ªáu v√†o form ƒë·ªÉ ch·ªânh s·ª≠a
    form.elements["id"].value = product.id;
    form.elements["name"].value = product.name;
    form.elements["cate_id"].value = product.cate_id;
    form.elements["price"].value = product.price;
    form.elements["detail"].value = product.detail;

    //cu·ªôn l√™n ƒë·∫ßu trang
    window.scrollTo({top: 0 , behavior: "smooth"});
}

//khi nh·∫•n n√∫t s·ª≠a th√¨ c·∫≠p nh·∫≠t
async function updateProduct(id, formData){
    // L·∫•y th√¥ng tin s·∫£n ph·∫©m hi·ªán t·∫°i (ƒë·ªÉ gi·ªØ ·∫£nh c≈© n·∫øu kh√¥ng ƒë·ªïi)
    const oldRes = await fetch(`${API_PRODUCTS}/${id}`);
    const oldProduct = await oldRes.json();

    // L·∫•y ·∫£nh ng∆∞·ªùi d√πng v·ª´a ch·ªçn
    const imageFile = formData.get("image");
    let imageName = oldProduct.image || "default.jpg";

    // N·∫øu ng∆∞·ªùi d√πng ch·ªçn ·∫£nh m·ªõi ‚Üí d√πng ·∫£nh m·ªõi
    if (imageFile && imageFile.name) {
        imageName = imageFile.name;
    }

    //t·∫°o 1 object ch·ª©a c√°c th√¥ng tin m·ªõi
    const updateProduct = {
        name: formData.get("name"),
        cate_id: formData.get("cate_id"),
        price: formData.get("price"),
        detail: formData.get("detail"),
        image: imageName
    }

    //t·∫°o ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t put
    await fetch(`${API_PRODUCTS}/${id}`,{
        method: "PUT",
        headers: {"Content-Type":"application/json"},
        body: JSON.stringify(updateProduct)
    });

    alert("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng !");
}

//khi nh·∫•n n√∫t ·ªü form
form.addEventListener("submit", async (e) => {
    e.preventDefault();
    //t·∫°o ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ g·ªçi h√†m x·ª≠ l√Ω form v√† l·∫•y id ·∫©n trong form
    const formData = new FormData(form);
    const id = form.elements["id"].value;

    //x√©t tr∆∞·ªùng h·ª£p id c√≥ ho·∫∑c kh√¥ng trong form
    if(id){
        //n·∫øu c√≥ id th√¨ c·∫≠p nh·∫≠t
        await updateProduct(id, formData);
    }
    else{
        //n·∫øu kh√¥ng c√≥ id th√¨ th√™m m·ªõi
        await addProduct(formData);
    }
    form.reset();
    loadProducts();
});

//h√†m xo√° s·∫£n ph·∫©m
async function deleteProduct(id) {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?")) {
        await fetch(`${API_PRODUCTS}/${id}`, { method: "DELETE" });
        alert("üóë X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
        loadProducts();
    }
}

//h√†m chuy·ªÉn trang ƒë·ªÉ qu·∫£n l√Ω bi·∫øn th·ªÉ
function openVariantPage(productId) {
    window.location.href = `variants.html?product_id=${productId}`;
}

//ch·∫°y h√†m ƒë·ªÉ hi·ªÉn th·ªã ngay
loadCategories();
loadProducts();

//h√†m ƒëƒÉng xu·∫•t t√†i kho·∫£n admin
document.getElementById("logout-btn").addEventListener("click", () => {
    localStorage.removeItem("admin");
    alert("ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
    window.location.href = "login.html";
});
